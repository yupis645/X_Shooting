#pragma once

#include	"SchooLlibrary/conioex.h" 

#include <math.h>
#include <time.h>
#include <stdio.h>
#include <Windows.h>


// ----------------------------------------------------------------
// アプリ共通の定義
// ----------------------------------------------------------------


#define TestMode true			//タイトルやポーズ画面に操作説明が出る & デバックモードが使用できるようになる。

// DebugOn と StageRupe は TestMode 有効時のみ作動する
#define DebugOn true			//TestModeがtrueの時のみ使用できるデバックモードのフラグ。falseにするとデバックモードに入れなくなる
#define StageRupe false			//trueなら指定したステージからループする。falseならボスを倒した地点で終了
//ここまで


//==============================================================
//					画面関連の定義
// 
//==============================================================
#define	PXW	(1)						//サイズ比率(横幅)
#define	PXH	(1)						//サイズ比率(高さ)
#define	WIN_W	(200*3)	//(8*25*4)	//ウィンドウサイズ(横幅)
#define	WIN_H	(260*3)	//(8*25*3)	//ウィンドウサイズ(縦幅)
#define	SRN_W	(WIN_W/PXW)			//画面サイズ(横幅)
#define	SRN_H	(WIN_H/PXH)			//画面サイズ(高さ)
#define CENTER_X	(SRN_W / 2)		//画面の中央X座標
#define CENTER_Y	(SRN_H / 2)		//画面の中央Y座標
#define WORD_W	(8)					//1文字の横幅
#define WORD_H	(15)				//1文字の高さ


//==============================================================
//				画面ID：現在の画面の状態を表す
// 
//==============================================================

#define	TITLE	(1)	//タイトル
#define	GAME	(2)	//ゲーム
#define	RESULT	(3)	//結果
#define	OPTION	(4)	//オプション
#define	APP_EXIT	(999)	//アプリ終了


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//==============================================================
//					画像の表示設定
// 
//==============================================================
#define PLAYER_SIZE (48)		//画像のサイズ
#define BULLET_SIZE	(8)			//弾の画像サイズ
#define BUNBER_SIZE	(24)		//ボムの画像サイズ

//==============================================================
//					マップ関連の定義
// 
//==============================================================
#define MAP_CHIPLINE_W	(12)	//マップチップの行数
#define MAP_CHIPLINE_H	(10)	//マップチップの列数
#define MAP_W	(SRN_W / 31)	//マップのサイズ(画面の大きさ / マップチップのサイズ)	
#define MAP_H	(SRN_H / 31)	//マップのサイズ(画面の大きさ / マップチップのサイズ)	
#define MAP_SPLIT	(5)			//マップの分割数
#define CHIP_SIZE (32)			//マップチップのサイズ(正方形)
#define SCROLL_SPEED	(1)		//スクロールのスピード
#define MAX_STAGE	(16)		//ステージ数

//==============================================================
//					数学
// 
//==============================================================
#define ABS(num) ((num) > 0 ? (num) : -(num))		//符号を外した値を返す
#define REPEAT(num,min,max) if(num > max){num = min;} else if(num < min){num = max;}		



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
													
												//構造体//
			
//==============================================================
//					シーン構造体
//			各画面で使う変数を定義する
// 
//==============================================================
struct SCENE {
	bool loop;			//ゲームループ継続判定フラグ
	int	frame_count;	//フレーム数
	int	next_scene;		//次の遷移先の画面ID
	int scene_state;	//それぞれの画面の進行度合い
	POINT carsor;		//カーソルの位置

};

//==============================================================
//						文字の入力
// 
//==============================================================
typedef struct MOJI {
	char word[25];			//25文字の文章を入力可能
	int F;					
}MOJI;

//==============================================================================================
//					全体シーンで使用するデータ
// 
// ・Gameで加算され、リザルトで表示するscore
// ・タイトル画面で1Playerか2Playerどちらかを選ぶかで初期値が変わるlife
//==============================================================================================
struct GAMESTATE {
	int score;
	int life;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

													/*変数宣言*/

const RECT winView = { 0,0,SRN_W,SRN_H };		//画面の端っこの座標。画面内に映っているか判定する

extern GAMESTATE state;							
extern bool DebugEnable;



